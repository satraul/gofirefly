/*
Firefly III API v1.5.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-09-25T14:21:28+00:00

API version: 1.5.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofirefly

import (
	"encoding/json"
)

// TransactionLinkSingle struct for TransactionLinkSingle
type TransactionLinkSingle struct {
	Data                 TransactionLinkRead `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _TransactionLinkSingle TransactionLinkSingle

// NewTransactionLinkSingle instantiates a new TransactionLinkSingle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionLinkSingle(data TransactionLinkRead) *TransactionLinkSingle {
	this := TransactionLinkSingle{}
	this.Data = data
	return &this
}

// NewTransactionLinkSingleWithDefaults instantiates a new TransactionLinkSingle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionLinkSingleWithDefaults() *TransactionLinkSingle {
	this := TransactionLinkSingle{}
	return &this
}

// GetData returns the Data field value
func (o *TransactionLinkSingle) GetData() TransactionLinkRead {
	if o == nil {
		var ret TransactionLinkRead
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *TransactionLinkSingle) GetDataOk() (*TransactionLinkRead, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *TransactionLinkSingle) SetData(v TransactionLinkRead) {
	o.Data = v
}

func (o TransactionLinkSingle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TransactionLinkSingle) UnmarshalJSON(bytes []byte) (err error) {
	varTransactionLinkSingle := _TransactionLinkSingle{}

	if err = json.Unmarshal(bytes, &varTransactionLinkSingle); err == nil {
		*o = TransactionLinkSingle(varTransactionLinkSingle)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransactionLinkSingle struct {
	value *TransactionLinkSingle
	isSet bool
}

func (v NullableTransactionLinkSingle) Get() *TransactionLinkSingle {
	return v.value
}

func (v *NullableTransactionLinkSingle) Set(val *TransactionLinkSingle) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionLinkSingle) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionLinkSingle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionLinkSingle(val *TransactionLinkSingle) *NullableTransactionLinkSingle {
	return &NullableTransactionLinkSingle{value: val, isSet: true}
}

func (v NullableTransactionLinkSingle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionLinkSingle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
